apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release
    }

    compileSdkVersion 28

    defaultConfig {
        applicationId "com.joydeep.solar.calculator"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            zipAlignEnabled true
            debuggable true
            resValue "string", "GOOGLE_MAPS_KEY", "\"$GOOGLE_MAPS_KEY_DEBUG\""
        }

        release {
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "GOOGLE_MAPS_KEY", "\"$GOOGLE_MAPS_KEY_RELEASE\""
            signingConfig signingConfigs.release
        }
    }

    if (project.hasProperty("AndroidProject.signing")
            && new File(project.property("AndroidProject.signing").toString()).exists()) {
        Properties props = new Properties()
        def propFile = new File(project.property("AndroidProject.signing").toString())
        if (propFile.canRead()) {
            props.load(new FileInputStream(propFile))
            if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                    props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
                android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
                android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
                android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
            } else {
                println 'Keystore.properties found but some entries are missing'
                android.buildTypes.release.signingConfig = null
            }
        } else {
            println 'Keystore.properties file not found'
            android.buildTypes.release.signingConfig = null
        }
    }
}

dependencies {
    ext {
        supportLibVersion = '28.0.0'
    }
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibVersion}"
    implementation "com.android.support:cardview-v7:${supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'com.google.android.gms:play-services-maps:16.0.0'
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    implementation 'com.google.maps:google-maps-services:0.9.1'

    implementation 'org.slf4j:slf4j-simple:1.7.25'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '28.0.0'
            }
        }
    }
}